{"ast":null,"code":"import React,{useEffect,useRef,useState,useCallback}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const IsDevice=(()=>{if(typeof navigator=='undefined')return;let ua=navigator.userAgent;return{info:ua,Android(){return ua.match(/Android/i);},BlackBerry(){return ua.match(/BlackBerry/i);},IEMobile(){return ua.match(/IEMobile/i);},iOS(){return ua.match(/iPhone|iPad|iPod/i);},iPad(){return ua.match(/Mac/)&&navigator.maxTouchPoints&&navigator.maxTouchPoints>2;},OperaMini(){return ua.match(/Opera Mini/i);},/**\r\n       * Any Device\r\n       */any(){return IsDevice.Android()||IsDevice.BlackBerry()||IsDevice.iOS()||IsDevice.iPad()||IsDevice.OperaMini()||IsDevice.IEMobile();}};})();function useEventListener(eventName,handler){let element=arguments.length>2&&arguments[2]!==undefined?arguments[2]:document;const savedHandler=useRef();useEffect(()=>{savedHandler.current=handler;},[handler]);useEffect(()=>{const isSupported=element&&element.addEventListener;if(!isSupported)return;const eventListener=event=>savedHandler.current(event);element.addEventListener(eventName,eventListener);return()=>{element.removeEventListener(eventName,eventListener);};},[eventName,element]);}/**\r\n * Cursor Core\r\n * Replaces the native cursor with a custom animated cursor, consisting\r\n * of an inner and outer dot that scale inversely based on hover or click.\r\n *\r\n * @author Stephen Scaff (github.com/stephenscaff)\r\n *\r\n * @param {string} color - rgb color value\r\n * @param {number} outerAlpha - level of alpha transparency for color\r\n * @param {number} innerSize - inner cursor size in px\r\n * @param {number} innerScale - inner cursor scale amount\r\n * @param {number} outerSize - outer cursor size in px\r\n * @param {number} outerScale - outer cursor scale amount\r\n * @param {object} outerStyle - style object for outer cursor\r\n * @param {object} innerStyle - style object for inner cursor\r\n * @param {array}  clickables - array of clickable selectors\r\n *\r\n */function CursorCore(_ref){let{outerStyle,innerStyle,color='220, 90, 90',outerAlpha=0.3,innerSize=8,outerSize=8,outerScale=6,innerScale=0.6,trailingSpeed=8,clickables=['a','input[type=\"text\"]','input[type=\"email\"]','input[type=\"number\"]','input[type=\"submit\"]','input[type=\"image\"]','label[for]','select','textarea','button','.link']}=_ref;const cursorOuterRef=useRef();const cursorInnerRef=useRef();const requestRef=useRef();const previousTimeRef=useRef();const[coords,setCoords]=useState({x:0,y:0});const[isVisible,setIsVisible]=useState(false);const[isActive,setIsActive]=useState(false);const[isActiveClickable,setIsActiveClickable]=useState(false);let endX=useRef(0);let endY=useRef(0);/**\r\n     * Primary Mouse move event\r\n     * @param {number} clientX - MouseEvent.clientx\r\n     * @param {number} clientY - MouseEvent.clienty\r\n     */const onMouseMove=useCallback(_ref2=>{let{clientX,clientY}=_ref2;setCoords({x:clientX,y:clientY});cursorInnerRef.current.style.top=\"\".concat(clientY,\"px\");cursorInnerRef.current.style.left=\"\".concat(clientX,\"px\");endX.current=clientX;endY.current=clientY;},[]);// Outer Cursor Animation Delay\nconst animateOuterCursor=useCallback(time=>{if(previousTimeRef.current!==undefined){coords.x+=(endX.current-coords.x)/trailingSpeed;coords.y+=(endY.current-coords.y)/trailingSpeed;cursorOuterRef.current.style.top=\"\".concat(coords.y,\"px\");cursorOuterRef.current.style.left=\"\".concat(coords.x,\"px\");}previousTimeRef.current=time;requestRef.current=requestAnimationFrame(animateOuterCursor);},[requestRef]// eslint-disable-line\n);// RAF for animateOuterCursor\nuseEffect(()=>{requestRef.current=requestAnimationFrame(animateOuterCursor);return()=>cancelAnimationFrame(requestRef.current);},[animateOuterCursor]);// Mouse Events State updates\nconst onMouseDown=useCallback(()=>setIsActive(true),[]);const onMouseUp=useCallback(()=>setIsActive(false),[]);const onMouseEnterViewport=useCallback(()=>setIsVisible(true),[]);const onMouseLeaveViewport=useCallback(()=>setIsVisible(false),[]);useEventListener('mousemove',onMouseMove);useEventListener('mousedown',onMouseDown);useEventListener('mouseup',onMouseUp);useEventListener('mouseover',onMouseEnterViewport);useEventListener('mouseout',onMouseLeaveViewport);// Cursors Hover/Active State\nuseEffect(()=>{if(isActive){cursorInnerRef.current.style.transform=\"translate(-50%, -50%) scale(\".concat(innerScale,\")\");cursorOuterRef.current.style.transform=\"translate(-50%, -50%) scale(\".concat(outerScale,\")\");}else{cursorInnerRef.current.style.transform='translate(-50%, -50%) scale(1)';cursorOuterRef.current.style.transform='translate(-50%, -50%) scale(1)';}},[innerScale,outerScale,isActive]);// Cursors Click States\nuseEffect(()=>{if(isActiveClickable){cursorInnerRef.current.style.transform=\"translate(-50%, -50%) scale(\".concat(innerScale*1.2,\")\");cursorOuterRef.current.style.transform=\"translate(-50%, -50%) scale(\".concat(outerScale*1.4,\")\");}},[innerScale,outerScale,isActiveClickable]);// Cursor Visibility State\nuseEffect(()=>{if(isVisible){cursorInnerRef.current.style.opacity=1;cursorOuterRef.current.style.opacity=1;}else{cursorInnerRef.current.style.opacity=0;cursorOuterRef.current.style.opacity=0;}},[isVisible]);useEffect(()=>{const clickableEls=document.querySelectorAll(clickables.join(','));clickableEls.forEach(el=>{el.style.cursor='none';el.addEventListener('mouseover',()=>{setIsActive(true);});el.addEventListener('click',()=>{setIsActive(true);setIsActiveClickable(false);});el.addEventListener('mousedown',()=>{setIsActiveClickable(true);});el.addEventListener('mouseup',()=>{setIsActive(true);});el.addEventListener('mouseout',()=>{setIsActive(false);setIsActiveClickable(false);});});return()=>{clickableEls.forEach(el=>{el.removeEventListener('mouseover',()=>{setIsActive(true);});el.removeEventListener('click',()=>{setIsActive(true);setIsActiveClickable(false);});el.removeEventListener('mousedown',()=>{setIsActiveClickable(true);});el.removeEventListener('mouseup',()=>{setIsActive(true);});el.removeEventListener('mouseout',()=>{setIsActive(false);setIsActiveClickable(false);});});};},[isActive,clickables]);// Cursor Styles\nconst styles={cursorInner:{zIndex:999,display:'block',position:'fixed',borderRadius:'50%',width:innerSize,height:innerSize,pointerEvents:'none',backgroundColor:\"rgba(\".concat(color,\", 1)\"),...(innerStyle&&innerStyle),transition:'opacity 0.15s ease-in-out, transform 0.25s ease-in-out'},cursorOuter:{zIndex:999,display:'block',position:'fixed',borderRadius:'50%',pointerEvents:'none',width:outerSize,height:outerSize,backgroundColor:\"rgba(\".concat(color,\", \").concat(outerAlpha,\")\"),transition:'opacity 0.15s ease-in-out, transform 0.15s ease-in-out',willChange:'transform',...(outerStyle&&outerStyle)}};// Hide / Show global cursor\ndocument.body.style.cursor='none';return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{ref:cursorOuterRef,style:styles.cursorOuter}),/*#__PURE__*/_jsx(\"div\",{ref:cursorInnerRef,style:styles.cursorInner})]});}/**\r\n   * AnimatedCursor\r\n   * Calls and passes props to CursorCore if not a touch/mobile device.\r\n   */function AnimatedCursor(_ref3){let{outerStyle,innerStyle,color,outerAlpha,innerSize,innerScale,outerSize,outerScale,trailingSpeed,clickables}=_ref3;if(typeof navigator!=='undefined'&&IsDevice.any()){return/*#__PURE__*/_jsx(React.Fragment,{});}return/*#__PURE__*/_jsx(CursorCore,{outerStyle:outerStyle,innerStyle:innerStyle,color:color,outerAlpha:outerAlpha,innerSize:innerSize,innerScale:innerScale,outerSize:outerSize,outerScale:outerScale,trailingSpeed:trailingSpeed,clickables:clickables});}export default AnimatedCursor;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}